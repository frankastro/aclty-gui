package main;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NoeOGM
 */
import java.beans.PropertyVetoException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sqlite.Sqlite;
public class Iagendar extends javax.swing.JInternalFrame {

    
    DefaultTableModel model ;
    private principal fmain;
    private Sqlite db; 
    private int indexClase;
    private int indexTema;
    private String idSubtema;
            
    public Iagendar(principal fmain, Sqlite db) {
        this.fmain= fmain;
        this.db= db;
        initComponents();
        this.model = (DefaultTableModel) this.tblActividades.getModel();
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblActividades = new javax.swing.JTable();
        cboxClases = new javax.swing.JComboBox<>();
        cboxTemas = new javax.swing.JComboBox<>();
        cboxSubtemas = new javax.swing.JComboBox<>();
        btnAgendar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Fecha = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setPreferredSize(new java.awt.Dimension(1019, 532));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        tblActividades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idSubtema", "Tema", "Asignatura", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblActividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblActividadesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblActividades);
        if (tblActividades.getColumnModel().getColumnCount() > 0) {
            tblActividades.getColumnModel().getColumn(0).setMinWidth(0);
            tblActividades.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblActividades.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        cboxClases.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxClasesItemStateChanged(evt);
            }
        });
        cboxClases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxClasesActionPerformed(evt);
            }
        });

        cboxTemas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxTemasItemStateChanged(evt);
            }
        });
        cboxTemas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxTemasActionPerformed(evt);
            }
        });

        btnAgendar.setText("Agendar");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        jLabel1.setText("Clases");

        jLabel2.setText("Temas");

        jLabel3.setText("Subtemas");

        jLabel4.setText("Escoja Fecha de la Actividad -->");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(168, 168, 168))
                            .addComponent(cboxSubtemas, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboxTemas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboxClases, 0, 854, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxClases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxTemas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxSubtemas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblActividadesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblActividadesMousePressed
        //Cargando los datos del tema a estudiar
        //Buscando los datos por id del tema a estudiar
        int rowSelected= this.tblActividades.getSelectedRow();
        String actIdSubtema= this.tblActividades.getValueAt(rowSelected, 0).toString();
        //Rellenando los datos del subtema en la tblSubtema
        String columns[]={"*"};
        fmain.extractColumns("subtemas", columns, fmain.getTBLsubtema(),"WHERE id_subtema="+actIdSubtema);
        
        //Mostrar los datos recien añadidos en la tblActividades
        int row, col;
        row=this.tblActividades.getSelectedRow();
        col=this.tblActividades.getSelectedColumn();
        String data =this.tblActividades.getValueAt(row,col).toString();
        Iestudio fEstudio = new Iestudio(fmain);
        fmain.addInternal(fEstudio);        
    }//GEN-LAST:event_tblActividadesMousePressed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
    
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        String fecha =null;
        SimpleDateFormat Forma = new SimpleDateFormat("dd-MM-yyyy");
        fecha = Forma.format(Fecha.getDate());
        
        if(fecha.equals(null)){
            JOptionPane.showMessageDialog(null, "Seleccione Una Fecha Valida");
            return;
        }
        idSubtema= fmain.getTBLsubtemas().getValueAt(this.cboxSubtemas.getSelectedIndex(),0).toString();
        
        String preQuery= "INSERT INTO actividades(fecha, id_subtema) VALUES(\'%s\',%s)";
        String query= String.format(preQuery,fecha,idSubtema);
        db.setQuery(query);
        
        //Mostrar Subtema Recien Añadido
        String titulo = (String) this.cboxSubtemas.getSelectedItem();
        String clase = (String) this.cboxClases.getSelectedItem();
        model.addRow(new Object[]{idSubtema, titulo,clase,fecha});
        
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void cboxClasesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxClasesItemStateChanged
        //Limpiar cboxTemas (Por si tiene temas de otras clases)
        //Limpiar tblTemas
        this.cboxTemas.removeAllItems();
        fmain.getTBLtemas().removeAll();
        //Extraer el id de la clases
        indexClase= this.cboxClases.getSelectedIndex();
        String idClase= fmain.getTBLclases().getValueAt(indexClase,0).toString();
        //Extraer los subtemas de la clase seleccionada
        String cTemas[]={"id_tema","nombre_tema"};
        fmain.extractColumns("temas", cTemas, fmain.getTBLtemas(), "WHERE id_clase="+idClase);
        //Verificar Si existenTemas
        int numTemas= fmain.getTBLtemas().getRowCount();
        if(numTemas!=0){
                //Mostrar los temas de la clase seleccionada en el cboxTemas
                for(int c=0; c<numTemas; c++){
                   this.cboxTemas.addItem(fmain.getTBLtemas().getValueAt(c,1).toString());
               }
               
            }
            
    }//GEN-LAST:event_cboxClasesItemStateChanged

    private void cboxTemasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxTemasItemStateChanged
        //Limpiar cboxSubtemas (Por si hay subtemas de otros temas) 
        //Limpiar tblSubtemas
        
        this.cboxSubtemas.removeAllItems();
        fmain.getTBLsubtemas().removeAll();
        
        
        
            
            //Extraer el id de la clase y del tema seleccionado
            indexClase= this.cboxClases.getSelectedIndex();
            indexTema= this.cboxTemas.getSelectedIndex();
            
            
             if(indexTema!=-1){
                 String idClase= fmain.getTBLclases().getValueAt(indexClase,0).toString();
                String idTema= fmain.getTBLtemas().getValueAt(indexTema,0).toString();
                //Extraer los subtemas de la clase seleccionada
                String cSubtemas[]={"id_subtema","id_tema", "id_clase","titulo"};
                fmain.extractColumns("subtemas", cSubtemas, fmain.getTBLsubtemas(), "WHERE id_clase="+idClase + " and id_tema= "+ idTema);

                //Verificar si la clase tiene SubTemas
                int numSubTemas= fmain.getTBLsubtemas().getRowCount();
                if(numSubTemas!=0){
                    //Mostrar los subtemas de la clase seleccionada en el cboxTemas
                    
                    for(int c=0; c<numSubTemas; c++){
                        this.cboxSubtemas.addItem(fmain.getTBLsubtemas().getValueAt(c,3).toString());
                        
                    }

                 }
             }
            

    }//GEN-LAST:event_cboxTemasItemStateChanged

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        //Cargar Clases 
        String colClases[]={"id_clase","nombre_clase"};
        fmain.extractColumns("clases", colClases, fmain.getTBLclases(), "");
        
            //Cargar clases al cboxClases
            this.cboxClases.removeAll();
        int cClases= fmain.getTBLclases().getRowCount();
        for(int c=0; c<cClases; c++){
            this.cboxClases.addItem(fmain.getTBLclases().getValueAt(c,1).toString());  
        }
        
        //Cargar actividades anteriores
        int numActividades = fmain.getTBLactividades().getRowCount();
        int numClases= fmain.getTBLclases().getRowCount();
        for(int c= 0; c<numActividades; c++){
            int idSubtema= (int)fmain.getTBLactividades().getValueAt(c, 2);
            String fecha= fmain.getTBLactividades().getValueAt(c,1).toString();
            //Extraer el nombre del subtema con idSubtema
            String tema= fmain.extractColumn("subtemas", "titulo","WHERE id_subtema= "+idSubtema);
            String clase = null;
            int idClase= Integer.valueOf(fmain.extractColumn("subtemas", "id_clase","WHERE id_subtema= "+idSubtema));
            
            for(int cc=0; cc<numClases; cc++){
                int currentId =(int)fmain.getTBLclases().getValueAt(cc,0);
                
                if(idClase == currentId){
                    clase=fmain.getTBLclases().getValueAt(cc,1).toString();
                    break;
                }
            }
            model.addRow(new Object[]{idSubtema,tema,clase, fecha});    

            
            
        }
        
        
    }//GEN-LAST:event_formInternalFrameActivated

    private void cboxTemasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxTemasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxTemasActionPerformed

    private void cboxClasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxClasesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxClasesActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser Fecha;
    private javax.swing.JButton btnAgendar;
    private javax.swing.JComboBox<String> cboxClases;
    private javax.swing.JComboBox<String> cboxSubtemas;
    private javax.swing.JComboBox<String> cboxTemas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblActividades;
    // End of variables declaration//GEN-END:variables
}

